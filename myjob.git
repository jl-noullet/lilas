
git init : 
	cree un repo dans le dir courant, c'est a dire cree un dir .git qui va heberger toutes
	les references que git utilise pour gerer les versions
git clone https://github.com/jl-noullet/lilas
	cree un repo dans le dir courant en clonant le distant (pas besoin d'init)

git add mydir/myfile : starts the tracking of the file (put on the stage ?)
	je suppose que mydir/myfile est dans le dir courant (?) et que cette operation ne
	fait que referencer, pas de copie de data so far
git add '*.cpp' : wildcards welcome (subdirs included) ou meme --all (tout quoi ?)
git status : ben, le status
git commit -m "bla bla" : commit, i.e. "confir, remettre"
	ce qui n'est pas committed est sur le stage, ou "staged"
	staged = ready to be committed
	important : le blabla servira a reperer le commit dans l'historique
git commit -a -m "blabla"
	-a add automatiquement les fichiers modifies depuis le dernier commit (mais pas de nouveau)
git log : l'historique des commits
git log --summary : le meme moins resume !

account
	jl-noullet
	chipyards@gmail.com
	zkf45Q

https://github.com/jl-noullet/
https://help.github.com/
http://git-scm.com/docs
http://git-scm.com/book
Note : git c'est le soft de scm, github c'est l'hebergement

http://gitreal.codeschool.com/?utm_source=github&utm_medium=codeschool_option&utm_campaign=trygit

git help <command name>

git remote add origin https://github.com/jl-noullet/lilas
	on donne l'adresse d'un repo distant qui s'appelle "origin", avec une branche "master"
	ceci enregistre l'URL. si on s'est trompe : gite remote remove origin
git push -u origin master
	on fait un push, jusqu'a maintenant c'etait local, (-u = ?)
git push
	tout court, a condition d'avoir fait :
		git config --global push.default simple (ou matching ...)
git pull origin master
	l'operation inverse, qui permet de recuperer les changements faits par ailleurs
git pull
	tout court ? oui Ã§a peut marcher
git diff HEAD
	HEAD points to your most recent commit, il utilise le vrai diff !!! mais entre quoi et quoi ?
git diff
	tout court
git diff --staged
	diff entre ??(last committed ?) et staged
git reset mydir/myfile : unstage
	le contraire de add
git checkout -- myfile
	get rid of all the changes since the last commit for myfile
git branch mabranche : cree mabranche (en local)
git branch : liste les branches
git checkout mabranche : changer de branche (modal) (note : pas de -- ici)
git status : pour savoir sur quelle branche on est
	     pour voir ce qui a change depuis le dernier commit
git rm myfile : efface fichier (widcards are recursive, -r efface ausi les dirs)
	je crois que cela veut dire enlever du stage, pas detruire physiquement
git merge mabranche2 : merge 2 branches (destructif)
	il merge mabranche2 dans la branche courante (en local)
	il ne merge pas les fichiers, il merge les changes, meme destructifs !

git config : gere la config
	qui habite dans un fichier .git/config pour 1 repo ou ~/.gitconfig pour tous
git config --global
           For writing options: to global ~/.gitconfig file rather than the repository .git/config
git config --global user.name "jln_insa"
	pas pour le login, juste pour identifier l'auteur d'un commit
git config --global user.email "chipyards@gmail.com"
git config --global push.default simple
git config --global credential.helper cache
git config --global credential.helper 'cache --timeout=14400'
	tranquille pour 4 heures, c'est pour que git ne redemande pas le pwd a chaque push - parcequ'on est en HTTPS
	(en SSH on utiliserait une key : https://help.github.com/articles/caching-your-github-password-in-git/)
git config --global credential.helper store
	permanent, plus risque : The storage format is a .git-credentials file, stored in plaintext.


stash = planquer
https://help.github.com/articles/removing-sensitive-data-from-a-repository/
https://help.github.com/articles/removing-files-from-a-repository-s-history/

