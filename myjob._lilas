-----------------------------------------------------------------------------------------------------------------
R.E. du lilas principal du simulateur :
	\DEZIP\appsfo\arch\processeurComplet\ProcesseurComplet2015.lilas
- ce lilas est passe en premier argument pour toutes les simus et meme la nexys en remote
- il contient juste un <module>, contenant :
- une liste de signaux, in out et internal, meme format que le lilas HDL vu a l'etape 3 GPIO
- des instances, connectees explicitement,
  par exemple :
		<arch.coeur.CarteCoeur2a  name="carteCoeur"..... />
	  qui reference \DEZIP\appsfo\arch\coeur\CarteCoeur2a.lilas
	  dans le vhdl associe l'instance est :
		carteCoeur : arch_coeur_CarteCoeur2a
	  qui matche \DEZIP\appsfo\arch\coeur\CarteCoeur2a.vhd
  on trouve les instances des auttres "cartes" t.q. ROM, RAM, Audio, NVIC, etc...
- un element <code language="logic" durÃ©eActivation="1ns"> qui contient en CDATA du HDL concurrent
  a la maniere du lilas HDL vu a l'etape 3 GPIO. Ici il s'agit de la gestion du bus.
- des elements <awt name="fulano"> qui sont des blocs graphiques hierarchises, avec une hierarchie
  differente de celle du HDL.
  En particulier il y a plusieurs arbres possibles, qui sont choisis probablement via l'argument -awt=
  de la ligne de commande.
  Les chemins d'acces aux sous-blocs sont constitues de noms d'instances du HDL, termines par un nom
  d'awt. Les noms d'instance permettent de trouver le fichier source lilas correspondant, exemple :
	carteCoeur.coeur.coeurAWT.panMicroseq
	carteCoeur est une instance de arch.coeur.CarteCoeur2a, decrit dans \arch\coeur\CarteCoeur2a.lilas
	   coeur y est une instance de CoeurModifiable2a, cf CoeurModifiable2a.lilas
	      coeurAWT y est une instance de CoeurAWT2a, cf CoeurAWT2a.lilas
		 panMicroseq y est un awt, contenant une image arch.seqMicroProg.UniteSeqMicroProg2a
		    qu'on trouve dans \arch\seqMicroProg\UniteSeqMicroProg2a.svg
  Les awt contiennent des <ElementSVG idRef="valSelIndic" qui sont les elements animes ou editables du GUI.
  Par exemple ValSelIndic est un element <text> qui possede cet id sur l'image svg (c'est que du xml)
	<text
		x="2398.1099" y="6334.1987"
		id="valSelIndic"
		xml:space="preserve"
		style="font-size:159.3830719px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Times New Roman;-inkscape-font-specification:'Times New Roman,'"
		sodipodi:linespacing="125%">
			<tspan x="2398.1099" y="6334.1987" id="tspan3005">valSelIndic</tspan>
	</text>
   similairement les boules bleues ou rouges sont des elements <g qui sont des groupes (path + texte)
- les elements <script name="initEtape1"> contiennent un script qui est execute soit
	- action bouton
	- option -script dans la ligne de commande
  les scripts sont dans  ProcesseurComplet2015_tst.lilas qui est pris A LA PLACE de ProcesseurComplet2015.lilas
  si on met l'option -test dans la ligne de commande !!!
  
-----------------------------------------------------------------------------------------------------------------
Notes :
- Nommages
	- Les noms de modules Lilas sont les noms de fichiers lilas, un module pour 1 fichier
	- les noms d'entites vhdl generees reproduisent le pathname du fichier lilas, exemple
		entity arch_seqMicroProg_CtrDown
		genere d'apres \arch\seqMicroProg\CtrDown.lilas
	  
- AWT = Abstract Window Toolkit (AWT) est une bibliothèque graphique pour Java
  mais en fait c'est presque totalement masque par Lilas et SVG
	https://fr.wikipedia.org/wiki/Abstract_Window_Toolkit
	https://www.jmdoudoux.fr/java/dej/chap-awt.htm
	https://www.jmdoudoux.fr/java/dej/chap-awt-composants.htm

- SVG = Scalable Vector Graphics
  <!-- Created with Inkscape (http://www.inkscape.org/) --> 
  sodipodi est un ancetre d'inkscape

- extract
  les fichiers qu'on peut extraire avec -extract ont le suffixe _extract, c'est pour cela qu'ils sont
  differents de ceux qui sont charges automatiquement "par defaut"

- build par etapes
	-to=java (en fait il fait aussi les .class puis efface le .java)
	 question : fait-il deux .java par module (activation class et root class) ? oui
	-to=fpga fait un top module mydesign_boardName_fpga.lilas et un module de remote
	 debug mydesign_boardName_pc.lilas
	-to=vhdl (question : est-ce recursif ?)
	-to=bit
	-to=xml serait un template d'instanciation en Lilas (question : c'est ça ?)
	-to=tst : il fait un module de test (un testbench) mydesign_tst.lilas
	 ce module a une variable de config isRemoteExecution
  operations auxiliaires :
	-to=list
	-to=xml serait un template d'instanciation en Lilas (question : c'est ça ?)
  etc...

- options a tester :
	-cleanFull
	-show=java, -show=javaroot (activation class et root class)
	-force

- options connues
	-script=	les script sont dans le top module (normalement _tst)
	-awt=		les awt sont dans le top module, mais ils peuvent referencer awt d'un module en dessous
	-test : lance mydesign_tst.lilas avec isRemoteExecution=false
	-remote : builde le .bit puis lance mydesign_tst.lilas avec isRemoteExecution=true

- les 2 classes d'un module
	- mymodule.class : dite activation class (le code lilas comportemental fournit le corps de la
	  fonction d'activation)
	- mymodule_LILAS.class : la super class ou root class dont le constructeur cree les ports du module

- les modules qui ont plusieurs configurations (par exemple le _tst)
	mydesign_tst_0.class et mydesign_tst_1.class
	mydesign_tst_0_LILAS.class et mydesign_tst_1_LILAS.class
	mydesign_tst_LILAS.class et mydesign_tst_LILAS$1.class et mydesign_tst_LILAS$2.class (pourquoi ?)

- file path
  comment lilas sait-il ou trouver /arch/processeurComplet/ProcesseurComplet2015.lilas ?
  sans doute grace a lilasConfig.xml qui fait reference a
	LILASHOME/lib
	~/APPSFO
  cependant arch n'est pas dans LILASHOME/lib mais dans LILASHOME/lib/appsfo.jar
	<?xml version="1.0" encoding="UTF-8"?><config>
	<jar path="/home/commetud/3eme Annee MIC/APPSFO/LILASHOME/lib"/>
	<var name="javaLibraryPath" value="/home/commetud/3eme Annee MIC/APPSFO/LILASHOME/lib"/>
	<var name="dirSrc" value="/home_pers/noullet/APPSFO"/>
	<var name="logLevel" value="SEVERE"/>
	<var name="nexys3LoadCmd" value="lilas"/>
	<var name="ftdiJava" value="ftdi"/>
	</config>
   d'ou les experiences a faire :
	- demander un .lilas inexistant, pour voir s'il dit ou il a cherche : IL DIT PAS
	- utiliser l'option to=list : MARCHE PO si cela vient d'un jar, mais OK si tout vient d'un arbre a plat
	- renommer appsfo.jar, puisque son nom n'est mentionne nulle part, pour confirmer qu'il cherche
	  dans tous les jars : OUI IL LE FAIT
	- essayer de refaire un appsfo.jar en zippant le contenu : MARCHE PLUS OU MOINS
	- essayer avec le contenu a plat : NON, TROUVE RIEN si on met dans LILASHOME/lib
	  OK si on met le contenu de appsfo.jar (arch, etape1, etc...) dans APPSFO
	- modifier un .lilas :
		mode jar : MODIF PAS PRISE, il utilise la version .class
		mode flat : GROS PLANTUS
	- idem, en supprimant la .class : ECHOUE au lieu de recompiler - hyp : le jar est en read-only

- zip sous linux
	zip -r monzip.zip truc chose	<-- -r pour recursif, indispensabeul
	zip ~/ailleurs/monzip.zip truc/chose/bidule.png	<-- ajoute ou remplace bidule (il faut etre dans le dir de truc)
	zip -d ~/ailleurs/monzip.zip truc/chose/bidule.png	<-- supprime bidule
	rm -r arch; unzip -u ~/ailleurs/monzip.zip arch <-- refresh la branche arch
-----------------------------------------------------------------------------------------------------------------
RE du code source de Lilas V4 (archive LILASV4.zip de 144 031 599 bytes)
	LILASV4\doc : doc exhaustive generee en html - contient un tree mais c'est le tree des heritages, pas des appels
	LILASV4\src : contint du code source mais aussi des demos avec des illustrations
	LILASV4\src\jni : jni est l'interface avec le C (Java Native Interface)
	LILASV4\src\lilas : l'essentiel est la, dans seult 3 Mbytes de code...
	
La racine des packages de lilas c'est
/LILASV4/src

2 fichiers package-info.java : FBI sert a rien
	dans lilas/ il dit : package lilas;
	dans lilas/base il dit : package lilas.base;

La classe Main contient le point d'entree :
	public static void main (String[] args)
mais aussi :
	public Main (String[] args)
qui est donc son constructeur, non ? mais on ne voit pas d'instance de la classe Main.
Cela serait-il que la classe qui possede la methode main est instanciee implicitement ? NON
grep -r "new Main" .
rien, alors peut etre que simplement cette classe ne sert pas.

Y a-t-il d'autres points d'entree ?
grep -r 'public static void main' . > ../JLN_list_of_mains
oui ! il y en a 74 dont 25 dans la lilas/
Cela justifie de faire un tree, a moins que javac sache compiler recursivement a partir
d'une classe de depart...

points d'entree remarquables :
./lilas/logic/Compilateur.java:	public static void main (String[] args) throws DOMException, ExceptionLilas, ParseException, ParserConfigurationException, TransformerException, IOException {
./lilas/logic/CompilateurToJava.java:	public static void main (String[] args) throws DOMException, ExceptionLilas, ParseException, ParserConfigurationException, TransformerException, IOException {
./lilas/logic/CompilateurToVHDL.java:	public static void main (String[] args) throws DOMException, ExceptionLilas, ParseException, ParserConfigurationException, TransformerException, IOException {
./lilas/logic/parser/Parser.java:  protected JJTParserState jjtree = new JJTParserState();public static void main(String args [])
./lilas/logic/parser/Parser.jj:  public static void main(String args [])
./lilas/logic/parser/Parser.jjt:  public static void main(String args [])

Pour exemple, la classe lilas.Main, elle importe :
packages externes :
	java.*
	javax.*
	org.w3c.dom
package presents dans le tree LILASV4
	external.xilinx
	lilas
	lilas.awt
	lilas.awt.tree
	lilas.awt.treetable
	lilas.base
	lilas.util
	lilas.util.compiler
	lilas.xml

On envisage de faire un tree base sur les imports --> classe LilasTree :

Question 1 : est-ce que toutes les importations se font classe par classe ?
$ grep -r 'import lilas[.].*[*]' .
./lilas/awt/MemoryDisplay.java:import lilas.awt.treetable.*;	<-- 21 classes
./lilas/awt/TypeDrawStandard.java:import lilas.type.*;		<--  8 classes
C'est gerable a la main en modifiant ces 2 fichiers
D'autre part il y a des imports qui concernent des enums, dont la classe est nommée par l'avant-dernier nom
On peut les identifier au fait que l'avant-dernier nom commencent par un majuscule, alors c'est celui-ci
qui doit servir a engendrer le nom de fichier .java

Question 2 : est-ce qu'il faut gerer les commentaires java ?
grep -r '[/].*import ' .
- rien -

Question 3 : Y a-t-il des invocations de classe non importees avec un chemin complet ?

oui. il faut rechercher les chaines t.q. lilas.awt.[A-Z], lilas.base.[A-Z],... etc ...
donc avoir la liste des packages
grep -r  --no-filename '^package ' lilas | sort | uniq
	lilas.awt.tree;
	lilas.awt.treetable;
	lilas.awt;
	lilas.base;
	lilas.bib.awt;
	lilas.bib.logic.clock;
	lilas.bib.logic.memoire;
	lilas.bib.miniSpartan6.genClk;
	lilas.bib.nexys3.ram128Mb;
	lilas.bib.nexys3;
	lilas.bib.nexys3Old.genClk;
	lilas.cmm.parser;
	lilas.cmm.parser;
	lilas.cmm;
	lilas.edit;
	lilas.logic.parser;
	lilas.logic.parser;
	lilas.logic;
	lilas.type;
	lilas.util.compiler;
	lilas.util;
	lilas.xml;
	lilas;

Spec de la methode explore de la classe LilasTree :
- la methode prend comme arg un nom de classe en style java, donc relatif a src, exemples :
	lilas.base.Module
	lilas.Main
- elle convertit en un file path t.q.
	/home/jln/LILASV4/src/lilas/base/Module.java
- elle lit le fichier ligne par ligne en cherchant les import
- pour chaque import elle trie en fonction du premier nom :
	java et javax
	org
	external
	lilas
	inconnu
  et elle range le nom de classe dans 1 map parmi 5 crees dans la classe LilasTree
- si c'est d'un package lilas :
	- engendre un file pathname .java
	- si fichier existe, se rappelle recursivement, sinon message "not found"

Resultat premiere experience LilasTree.explore
   ==> 6 enums identifiee au fait que le nom precedent commence par majuscule
	lilas.Main.MSG -> 2
	lilas.base.Port.Mode -> 10
	lilas.base.Port.Propagate -> 1
	lilas.base.ValModuleStatus.Status -> 1
	lilas.edit.Plot.Position -> 5
	lilas.type.StdLogic.ValeurBit -> 3
   ==> 2 messages not found" dus a des '/*' <-- ce qui etait attendu
	not found lilas.type.* (/home/jln/LILASV4/src/lilas/type/*.java)
	not found lilas.awt.treetable.* (/home/jln/LILASV4/src/lilas/awt/treetable/*.java)
Boucle trouvee par hasard : lilas.base.Module importe lilas.Main qui importe lilas.base.Module !!!!

-----------------------------------------------------------------------------------------------------------------
Ant et Eclipse
www.vogella.com/tutorials/ApacheAnt/article.html
https://www.tutorialspoint.com/ant/ant_eclipse_integration.htm
http://barlatier.developpez.com/eclipse/tutorial/ant/
http://www.jmdoudoux.fr/java/dejae/indexavecframes.htm
https://www.jmdoudoux.fr/java/dejae/chap010.htm
http://www.jmdoudoux.fr/accueil.html
http://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2FgettingStarted%2Fqs-81_basics.htm
--------------------------------------------------------------------------------------------------

