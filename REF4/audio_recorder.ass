; single track audio recorder by JLN
; polling model
; limite a 1<<16 blocs soit 21.475s
; switch 1 : record, switch 0 : play
        ORG	0
	WORD	0x0400	; initialisation SP
	WORD	debut	; initialisation PC
pause:	RETURN

; déclarations pour Nexys3IO
SW:	EQU 	0x4000
BTN:	EQU 	0x4001
LED:    EQU 	0x4002
MODE:    EQU 	0x4003
DigitHexa:EQU 	0x4004

; déclarations pour carte Audio
DataSPI:EQU	0x1000
DataPWM:EQU	0x1001
Status:	EQU	0x1002
Format:	EQU	0x1003

; déclarations pour carte NVIC
ITVR:   EQU     0x2000
IMR:	EQU	0x2001

; déclarations pour carte GPIO
ODR:    EQU     0x3000;
IDR:    EQU     0x3001;
CR:     EQU     0x3002;

; déclarations pour carte RamDisk
NoBlocPoidsForts: EQU 0x5000
NoBlocPoidsFaibles: EQU 0x5002
AdrZone:EQU 	0x5004
CMD: 	EQU     0x5006
STATUS:	EQU	0x5008

TabIT:  WORD    errIT ; HandlerIT0 
	WORD 	errIT ; HandlerIT1 
	WORD 	errIT ; HandlerIT2 
	WORD 	errIT ; HandlerIT3 
	WORD 	errIT ; HandlerIT4 
	WORD 	errIT ; HandlerIT5 
	WORD 	errIT ; HandlerIT6 
	WORD 	errIT ; HandlerIT7 

errIT: 	B    	errIT ; pour bloquer le programme si une IT imprévue est levée 


; initialiser
init:	XOR	R0, R0
	ST 	R0, [#DigitHexa]
	MOV	R12, R0			; MSBs bloc #
	ST	R12, [#NoBlocPoidsForts]
	MOV	R11, R0			; LSBs bloc #
	ST	R11, [#NoBlocPoidsFaibles]
	ST 	R0, [#CMD]
	LDI	R4, #0x0200		; adresse en RAM
	LDI	R5, #0x021F		; masque pour adresse en RAM
	LDI	R6, #0x000F		; masque pour test adresse
	LDI	R7, #0x0010		; masque pour changer de buffer
	LDI	R1, #1			; constante
	LDI	R2, #2			; constante
	LDI	R3, #3			; constante
	RETURN

debut: 	LDI 	R14, #TabIT
	CALL	#init

; boucle audio, tourne toujours pour faciliter migration vers interruption

loop:	LDB	R0, [#Status]
	CSRC 	R0
	BNC	loop	; attente SPI pret
;	call	#pause  ; seult pour simu
; on récupère l'échantillon dans R1
	LDB  	R8, [#DataSPI]

; test UI
	LD 	R0, [#SW]
	CMP 	R1, R0
	BZ 	play
	CMP 	R2, R0
	BZ 	record
	CALL	#init
	B 	loop
; --------------------------------------------------------------------
record:
	STRB	R8, [R4]	; copier echantillon en RAM
	ADD	R4, R1 		; incrementer adresse
	AND	R4, R5
	MOV	R0, R4
	AND 	R0, R6		; tester fin de buffer
	BZ 	eorb
	B 	loop
;				; end of recorded block
eorb:	XOR	R0, R0
	ST 	R0, [#CMD]
	MOV	R0, R4
	XOR	R0, R7		; base du buffer qu'on vient de quitter
	ST	R0, [#AdrZone]
	ADD	R11, R1			; LSBs bloc #
	ST	R11, [#NoBlocPoidsFaibles]
	ST 	R3, [#CMD]
;
	ST 	R11, [#DigitHexa] ; affichage de temps
	B	loop
; --------------------------------------------------------------------
play:
	LDRB	R8, [R4]	; copier echantillon de la RAM
	STB	R8, [#DataPWM]
	ADD	R4, R1 		; incrementer adresse
	AND	R4, R5
	MOV	R0, R4
	AND 	R0, R6		; tester fin de buffer
	BZ 	eopb
	B 	loop
;				; end of recorded block
eopb:	XOR	R0, R0
	ST 	R0, [#CMD]
	MOV	R0, R4
	XOR	R0, R7		; base du buffer qu'on vient de quitter
	ST	R0, [#AdrZone]
	ADD	R11, R1			; LSBs bloc #
	ST	R11, [#NoBlocPoidsFaibles]
	ST 	R1, [#CMD]
;
	ST 	R11, [#DigitHexa] ; affichage de temps
	B	loop
